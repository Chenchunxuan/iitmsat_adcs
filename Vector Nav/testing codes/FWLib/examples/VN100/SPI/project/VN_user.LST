C51 COMPILER V9.05   VN_USER                                                               06/03/2012 17:04:53 PAGE 1   


C51 COMPILER V9.05, COMPILATION OF MODULE VN_USER
OBJECT MODULE PLACED IN .\VN_user.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\VN_user.c DEBUG OBJECTEXTEND OBJECT(.\VN_user.obj)

line level    source

   1          /***************** (C) COPYRIGHT 2009 VectorNav Technologies *******************
   2          * File Name          : VN_user.c
   3          * Author             : John Brashear
   4          * Version            : V1.0.0
   5          * Date               : 09/26/2009
   6          * Description        : This file contains all the functions that are hardware 
   7          *                    : specific. These functions need to be modified by the 
   8          *                    : user to be compatible with their hardware architecture.
   9          ********************************************************************************
  10          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING
  11          * CUSTOMERS WITH EXAMPLE CODE IN ORDER TO SAVE THEM TIME. AS A RESULT,
  12          * VECTORNAV SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT OR 
  13          * CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE 
  14          * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE 
  15          * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  16          *******************************************************************************/
  17          
  18          /* Includes ------------------------------------------------------------------*/
  19          #include "stm32f10x_lib.h"
*** WARNING C318 IN LINE 19 OF ..\VN_user.c: can't open file 'stm32f10x_lib.h'
  20          #include "VN_user.h"
*** ERROR C141 IN LINE 38 OF ..\VN_user.h: syntax error near ')'
  21          #include "VN_lib.h"
*** WARNING C322 IN LINE 113 OF ..\VN_math.h: unknown identifier
  22          
  23          /* Private typedef -----------------------------------------------------------*/
  24          /* Private define ------------------------------------------------------------*/
  25          /* Private macro -------------------------------------------------------------*/
  26          /* Private variables ---------------------------------------------------------*/
  27          /* Private function prototypes -----------------------------------------------*/
  28          /* Private functions ---------------------------------------------------------*/
  29          
  30          
  31          /*******************************************************************************
  32          * Function Name  : VN_SPI_SetSS(unsigned char sensorID, bool LineState)
  33          * Description    : This is a generic function that will set the SPI slave select
  34          *                  line for the given sensor. This function needs to be added by
  35          *                  the user with the logic specific to their hardware to perform
  36          *                  the necessary actions to either raise or lower the slave
  37          *                  select line for the given sensor.  If a multiplexer is used
  38          *                  then the logic/communications neccessary to perform the
  39          *                  actions should be placed here.                                        
  40          * Input          : sensorID  -> The sensor to set the slave select line for.
  41          *                : state -   -> The state to set the slave select to.
  42          * Output         : None
  43          * Return         : None
  44          *******************************************************************************/
  45          void VN_SPI_SetSS(unsigned char sensorID, VN_PinState state){
  46   1      
  47   1      /* User code to set SPI SS lines goes here. */   
  48   1        switch(sensorID){
  49   2        
  50   2          case 0:
  51   2            if(state == VN_PIN_LOW){
  52   3              /* Start SPI Transaction - Pull SPI CS line low */
C51 COMPILER V9.05   VN_USER                                                               06/03/2012 17:04:53 PAGE 2   

  53   3              GPIO_ResetBits(GPIOA, GPIO_Pin_0);
  54   3            }else{
  55   3              /* End SPI transaction - Pull SPI CS line high */
  56   3              GPIO_SetBits(GPIOA, GPIO_Pin_0);
  57   3            }
  58   2            break;
  59   2        }
  60   1      }
  61          
  62          /*******************************************************************************
  63          * Function Name  : VN_SPI_SendReceiveWord(unsigned long data)
  64          * Description    : Transmits the given 32-bit word on the SPI bus. The user needs
  65          *                  to place their hardware specific logic here to send 4 bytes
  66          *                  out the SPI bus. The slave select line is controlled by the 
  67          *                  function VN_SPI_SetSS given above, so the user only needs
  68          *                  to deal with sending the data out the SPI bus with this
  69          *                  function.
  70          * Input          : data -> The 32-bit data to send over the SPI bus
  71          * Output         : None
  72          * Return         : The data received on the SPI bus
  73          *******************************************************************************/
  74          unsigned long VN_SPI_SendReceive(unsigned long data){
  75   1      
  76   1      /* User code to send out 4 bytes over SPI goes here */
  77   1        unsigned long i;
  78   1        unsigned long ret = 0;
  79   1        
  80   1        for(i=0;i<4;i++){
  81   2          /* Wait for SPI1 Tx buffer empty */
  82   2          while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
  83   2        
  84   2          /* Send SPI1 requests */
  85   2          SPI_I2S_SendData(SPI1, VN_BYTE(data, i));
  86   2        
  87   2          /* Wait for response from VN-100 */
  88   2          while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
  89   2      
  90   2          /* Save received data in buffer */
  91   2          ret |= ((unsigned long)SPI_I2S_ReceiveData(SPI1) << (8*i));    
  92   2        }
  93   1        
  94   1        return ret;
  95   1      }
  96          
  97          /*******************************************************************************
  98          * Function Name  : VN_Delay(unsigned long delay_uS)
  99          * Description    : Delay the processor for deltaT time in microseconds.  The user
 100          *                  needs to place the hardware specific code here necessary to 
 101          *                  delay the processor for the time span given by delay_uS
 102          *                  measured in micro seconds. This function doesn't need to be
 103          *                  ultra precise. The only requirement on this function is that
 104          *                  the processor is delayed a time NO LESS THAN 90% of the time 
 105          *                  given by the variable delay_uS in microseconds. The minimum
 106          *                  timespan that is used by the VectorNav library code is 50uS so
 107          *                  the function call shouldn't affect the timing accuracy much.
 108          *                  If you decide to modify this library or wish to have more
 109          *                  precision on this delay function then you can comment out this
 110          *                  function and replace it with an optimized macro instead. Many
 111          *                  compilers have their own delay routines or macros so make sure
 112          *                  you check your compiler documentation before attempting to
 113          *                  write your own.
 114          * Input          : delay_uS -> Time to delay the processor in microseconds
C51 COMPILER V9.05   VN_USER                                                               06/03/2012 17:04:53 PAGE 3   

 115          * Output         : None
 116          * Return         : None
 117          *******************************************************************************/
 118          void VN_Delay(unsigned long delay_uS){
 119   1      
 120   1      /* User code to delay the processor goes here. Below is example code that
 121   1         works for a 32-bit ARM7 Cortex processor clocked at 72 MHz.  For any 
 122   1         other processor you will need to replace this with code that works
 123   1         for your processor.  Many compilers will have their own delay routines
 124   1         so make sure you check your compiler documentation before attempting to
 125   1         write your own. */
 126   1        unsigned long i;
 127   1        for(i=delay_uS*10; i--; );
 128   1      }
 129          
 130          /******************* (C) COPYRIGHT 2009 VectorNav Technologies *****************
 131          ***********************************END OF FILE*********************************/

C51 COMPILATION COMPLETE.  2 WARNING(S),  1 ERROR(S)
