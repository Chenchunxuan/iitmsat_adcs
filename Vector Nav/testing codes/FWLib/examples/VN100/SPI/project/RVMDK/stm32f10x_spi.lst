C51 COMPILER V9.05   STM32F10X_SPI                                                         06/03/2012 17:04:55 PAGE 1   


C51 COMPILER V9.05, COMPILATION OF MODULE STM32F10X_SPI
OBJECT MODULE PLACED IN .\stm32f10x_spi.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\..\library\src\stm32f10x_spi.c DEBUG OBJECTEXTEND PRINT(.\stm32f10x_spi.
                    -lst) OBJECT(.\stm32f10x_spi.obj)

line level    source

   1          /******************** (C) COPYRIGHT 2008 STMicroelectronics ********************
   2          * File Name          : stm32f10x_spi.c
   3          * Author             : MCD Application Team
   4          * Version            : V2.0.3
   5          * Date               : 09/22/2008
   6          * Description        : This file provides all the SPI firmware functions.
   7          ********************************************************************************
   8          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
   9          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
  10          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
  11          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
  12          * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
  13          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  14          *******************************************************************************/
  15          
  16          /* Includes ------------------------------------------------------------------*/
  17          #include "stm32f10x_spi.h"
*** WARNING C318 IN LINE 17 OF ..\..\library\src\stm32f10x_spi.c: can't open file 'stm32f10x_spi.h'
  18          #include "stm32f10x_rcc.h"
*** WARNING C318 IN LINE 18 OF ..\..\library\src\stm32f10x_spi.c: can't open file 'stm32f10x_rcc.h'
  19          
  20          /* Private typedef -----------------------------------------------------------*/
  21          /* Private define ------------------------------------------------------------*/
  22          /* SPI SPE mask */
  23          #define CR1_SPE_Set          ((u16)0x0040)
  24          #define CR1_SPE_Reset        ((u16)0xFFBF)
  25          
  26          /* I2S I2SE mask */
  27          #define I2SCFGR_I2SE_Set     ((u16)0x0400)
  28          #define I2SCFGR_I2SE_Reset   ((u16)0xFBFF)
  29          
  30          /* SPI CRCNext mask */
  31          #define CR1_CRCNext_Set      ((u16)0x1000)
  32          
  33          /* SPI CRCEN mask */
  34          #define CR1_CRCEN_Set        ((u16)0x2000)
  35          #define CR1_CRCEN_Reset      ((u16)0xDFFF)
  36          
  37          /* SPI SSOE mask */
  38          #define CR2_SSOE_Set         ((u16)0x0004)
  39          #define CR2_SSOE_Reset       ((u16)0xFFFB)
  40          
  41          /* SPI registers Masks */
  42          #define CR1_CLEAR_Mask       ((u16)0x3040)
  43          #define I2SCFGR_CLEAR_Mask   ((u16)0xF040)
  44          
  45          /* SPI or I2S mode selection masks */
  46          #define SPI_Mode_Select      ((u16)0xF7FF)
  47          #define I2S_Mode_Select      ((u16)0x0800) 
  48          
  49          /* Private macro -------------------------------------------------------------*/
  50          /* Private variables ---------------------------------------------------------*/
  51          /* Private function prototypes -----------------------------------------------*/
  52          /* Private functions ---------------------------------------------------------*/
C51 COMPILER V9.05   STM32F10X_SPI                                                         06/03/2012 17:04:55 PAGE 2   

  53          
  54          /*******************************************************************************
  55          * Function Name  : SPI_I2S_DeInit
  56          * Description    : Deinitializes the SPIx peripheral registers to their default
  57          *                  reset values (Affects also the I2Ss).
  58          * Input          : - SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  59          * Output         : None
  60          * Return         : None
  61          *******************************************************************************/
  62          void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
*** ERROR C141 IN LINE 62 OF ..\..\library\src\stm32f10x_spi.c: syntax error near '*', expected ')'
  63          {
  64   1        /* Check the parameters */
  65   1        assert_param(IS_SPI_ALL_PERIPH(SPIx));
*** ERROR C202 IN LINE 65 OF ..\..\library\src\stm32f10x_spi.c: 'SPIx': undefined identifier
  66   1        
  67   1        switch (*(u32*)&SPIx)
*** ERROR C202 IN LINE 67 OF ..\..\library\src\stm32f10x_spi.c: 'u32': undefined identifier
*** ERROR C141 IN LINE 67 OF ..\..\library\src\stm32f10x_spi.c: syntax error near ')'
*** ERROR C202 IN LINE 67 OF ..\..\library\src\stm32f10x_spi.c: 'SPIx': undefined identifier
*** ERROR C141 IN LINE 67 OF ..\..\library\src\stm32f10x_spi.c: syntax error near ')'
  68   1        {
  69   2          case SPI1_BASE:
  70   2            /* Enable SPI1 reset state */
  71   2            RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
  72   2            /* Release SPI1 from reset state */
  73   2            RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
*** ERROR C202 IN LINE 73 OF ..\..\library\src\stm32f10x_spi.c: 'RCC_APB2Periph_SPI1': undefined identifier
  74   2            break;
*** ERROR C171 IN LINE 74 OF ..\..\library\src\stm32f10x_spi.c: 'break': missing enclosing loop
  75   2      
  76   2          case SPI2_BASE:
*** ERROR C202 IN LINE 76 OF ..\..\library\src\stm32f10x_spi.c: 'SPI2_BASE': undefined identifier
*** ERROR C172 IN LINE 76 OF ..\..\library\src\stm32f10x_spi.c: 'case': missing enclosing switch
  77   2            /* Enable SPI2 reset state */
  78   2            RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
  79   2            /* Release SPI2 from reset state */
  80   2            RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
*** ERROR C202 IN LINE 80 OF ..\..\library\src\stm32f10x_spi.c: 'RCC_APB1Periph_SPI2': undefined identifier
  81   2            break;
*** ERROR C171 IN LINE 81 OF ..\..\library\src\stm32f10x_spi.c: 'break': missing enclosing loop
  82   2      
  83   2          case SPI3_BASE:
*** ERROR C202 IN LINE 83 OF ..\..\library\src\stm32f10x_spi.c: 'SPI3_BASE': undefined identifier
*** ERROR C172 IN LINE 83 OF ..\..\library\src\stm32f10x_spi.c: 'case': missing enclosing switch
  84   2            /* Enable SPI3 reset state */
  85   2            RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
  86   2            /* Release SPI3 from reset state */
  87   2            RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
*** ERROR C202 IN LINE 87 OF ..\..\library\src\stm32f10x_spi.c: 'RCC_APB1Periph_SPI3': undefined identifier
  88   2            break;
*** ERROR C171 IN LINE 88 OF ..\..\library\src\stm32f10x_spi.c: 'break': missing enclosing loop
  89   2      
  90   2          default:
*** ERROR C172 IN LINE 90 OF ..\..\library\src\stm32f10x_spi.c: 'default': missing enclosing switch
  91   2            break;
*** ERROR C171 IN LINE 91 OF ..\..\library\src\stm32f10x_spi.c: 'break': missing enclosing loop
  92   2        }
  93   1      }
  94          
  95          /*******************************************************************************
  96          * Function Name  : SPI_Init
C51 COMPILER V9.05   STM32F10X_SPI                                                         06/03/2012 17:04:55 PAGE 3   

  97          * Description    : Initializes the SPIx peripheral according to the specified 
  98          *                  parameters in the SPI_InitStruct.
  99          * Input          : - SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 100          *                  - SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
 101          *                    contains the configuration information for the specified
 102          *                    SPI peripheral.
 103          * Output         : None
 104          * Return         : None
 105          ******************************************************************************/
 106          void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
*** ERROR C141 IN LINE 106 OF ..\..\library\src\stm32f10x_spi.c: syntax error near '*', expected ')'
 107          {
 108   1        u16 tmpreg = 0;
*** ERROR C202 IN LINE 108 OF ..\..\library\src\stm32f10x_spi.c: 'u16': undefined identifier
*** ERROR C141 IN LINE 108 OF ..\..\library\src\stm32f10x_spi.c: syntax error near 'tmpreg'
 109   1        
 110   1        /* check the parameters */
 111   1        assert_param(IS_SPI_ALL_PERIPH(SPIx));   
*** ERROR C202 IN LINE 111 OF ..\..\library\src\stm32f10x_spi.c: 'SPIx': undefined identifier
 112   1        
 113   1        /* Check the SPI parameters */
 114   1        assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
*** ERROR C202 IN LINE 114 OF ..\..\library\src\stm32f10x_spi.c: 'SPI_InitStruct': undefined identifier
 115   1        assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
*** ERROR C202 IN LINE 115 OF ..\..\library\src\stm32f10x_spi.c: 'SPI_InitStruct': undefined identifier
 116   1        assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
*** ERROR C202 IN LINE 116 OF ..\..\library\src\stm32f10x_spi.c: 'SPI_InitStruct': undefined identifier
 117   1        assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
*** ERROR C202 IN LINE 117 OF ..\..\library\src\stm32f10x_spi.c: 'SPI_InitStruct': undefined identifier
 118   1        assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
*** ERROR C202 IN LINE 118 OF ..\..\library\src\stm32f10x_spi.c: 'SPI_InitStruct': undefined identifier
 119   1        assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
*** ERROR C202 IN LINE 119 OF ..\..\library\src\stm32f10x_spi.c: 'SPI_InitStruct': undefined identifier
 120   1        assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
*** ERROR C202 IN LINE 120 OF ..\..\library\src\stm32f10x_spi.c: 'SPI_InitStruct': undefined identifier
 121   1        assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
*** ERROR C202 IN LINE 121 OF ..\..\library\src\stm32f10x_spi.c: 'SPI_InitStruct': undefined identifier
 122   1        assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
*** ERROR C202 IN LINE 122 OF ..\..\library\src\stm32f10x_spi.c: 'SPI_InitStruct': undefined identifier
 123   1      
 124   1      /*---------------------------- SPIx CR1 Configuration ------------------------*/
 125   1        /* Get the SPIx CR1 value */
 126   1        tmpreg = SPIx->CR1;
*** ERROR C202 IN LINE 126 OF ..\..\library\src\stm32f10x_spi.c: 'tmpreg': undefined identifier
 127   1        /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
 128   1        tmpreg &= CR1_CLEAR_Mask;
*** ERROR C202 IN LINE 128 OF ..\..\library\src\stm32f10x_spi.c: 'tmpreg': undefined identifier
*** ERROR C141 IN LINE 128 OF ..\..\library\src\stm32f10x_spi.c: syntax error near '0x3040'
*** ERROR C141 IN LINE 128 OF ..\..\library\src\stm32f10x_spi.c: syntax error near ')'
 129   1        /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
 130   1           master/salve mode, CPOL and CPHA */
 131   1        /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
 132   1        /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
 133   1        /* Set LSBFirst bit according to SPI_FirstBit value */
 134   1        /* Set BR bits according to SPI_BaudRatePrescaler value */
 135   1        /* Set CPOL bit according to SPI_CPOL value */
 136   1        /* Set CPHA bit according to SPI_CPHA value */
 137   1        tmpreg |= (u16)((u32)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
*** ERROR C141 IN LINE 137 OF ..\..\library\src\stm32f10x_spi.c: syntax error near 'SPI_InitStruct'
 138   1                        SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 139   1                        SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 140   1                        SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
C51 COMPILER V9.05   STM32F10X_SPI                                                         06/03/2012 17:04:55 PAGE 4   

 141   1        /* Write to SPIx CR1 */
 142   1        SPIx->CR1 = tmpreg;
*** ERROR C202 IN LINE 142 OF ..\..\library\src\stm32f10x_spi.c: 'SPIx': undefined identifier
 143   1        
 144   1        /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
 145   1        SPIx->I2SCFGR &= SPI_Mode_Select;             
*** ERROR C202 IN LINE 145 OF ..\..\library\src\stm32f10x_spi.c: 'SPIx': undefined identifier
*** ERROR C141 IN LINE 145 OF ..\..\library\src\stm32f10x_spi.c: syntax error near '0xF7FF'
*** ERROR C141 IN LINE 145 OF ..\..\library\src\stm32f10x_spi.c: syntax error near ')'
 146   1      
 147   1      /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
 148   1        /* Write to SPIx CRCPOLY */
 149   1        SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 150   1      }
 151          
 152          /*******************************************************************************
 153          * Function Name  : I2S_Init
 154          * Description    : Initializes the SPIx peripheral according to the specified 
 155          *                  parameters in the I2S_InitStruct.
 156          * Input          : - SPIx: where x can be  2 or 3 to select the SPI peripheral
 157          *                     (configured in I2S mode).
 158          *                  - I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 159          *                    contains the configuration information for the specified
 160          *                    SPI peripheral configured in I2S mode.
 161          * Output         : None
 162          * Return         : None
 163          ******************************************************************************/
 164          void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
*** ERROR C141 IN LINE 164 OF ..\..\library\src\stm32f10x_spi.c: syntax error near '*', expected ')'
 165          {
 166   1        u16 tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
*** ERROR C202 IN LINE 166 OF ..\..\library\src\stm32f10x_spi.c: 'u16': undefined identifier
*** ERROR C141 IN LINE 166 OF ..\..\library\src\stm32f10x_spi.c: syntax error near 'tmpreg'
 167   1        u32 tmp = 0;
*** ERROR C202 IN LINE 167 OF ..\..\library\src\stm32f10x_spi.c: 'u32': undefined identifier
*** ERROR C141 IN LINE 167 OF ..\..\library\src\stm32f10x_spi.c: syntax error near 'tmp'
 168   1        RCC_ClocksTypeDef RCC_Clocks;
*** ERROR C202 IN LINE 168 OF ..\..\library\src\stm32f10x_spi.c: 'RCC_ClocksTypeDef': undefined identifier
*** ERROR C141 IN LINE 168 OF ..\..\library\src\stm32f10x_spi.c: syntax error near 'RCC_Clocks'
 169   1         
 170   1        /* Check the I2S parameters */
 171   1        assert_param(IS_SPI_23_PERIPH(SPIx));
*** ERROR C202 IN LINE 171 OF ..\..\library\src\stm32f10x_spi.c: 'SPIx': undefined identifier
 172   1        assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
*** ERROR C202 IN LINE 172 OF ..\..\library\src\stm32f10x_spi.c: 'I2S_InitStruct': undefined identifier
 173   1        assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
*** ERROR C202 IN LINE 173 OF ..\..\library\src\stm32f10x_spi.c: 'I2S_InitStruct': undefined identifier
 174   1        assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
*** ERROR C202 IN LINE 174 OF ..\..\library\src\stm32f10x_spi.c: 'I2S_InitStruct': undefined identifier
 175   1        assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
*** ERROR C202 IN LINE 175 OF ..\..\library\src\stm32f10x_spi.c: 'I2S_InitStruct': undefined identifier
 176   1        assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
*** ERROR C202 IN LINE 176 OF ..\..\library\src\stm32f10x_spi.c: 'I2S_InitStruct': undefined identifier
 177   1        assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
*** ERROR C202 IN LINE 177 OF ..\..\library\src\stm32f10x_spi.c: 'I2S_InitStruct': undefined identifier
 178   1      
 179   1      /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 180   1      
 181   1        /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 182   1        SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
*** ERROR C202 IN LINE 182 OF ..\..\library\src\stm32f10x_spi.c: 'SPIx': undefined identifier
*** ERROR C141 IN LINE 182 OF ..\..\library\src\stm32f10x_spi.c: syntax error near '0xF040'
C51 COMPILER V9.05   STM32F10X_SPI                                                         06/03/2012 17:04:55 PAGE 5   

*** ERROR C141 IN LINE 182 OF ..\..\library\src\stm32f10x_spi.c: syntax error near ')'
 183   1        SPIx->I2SPR = 0x0002;
 184   1        
 185   1        /* Get the I2SCFGR register value */
 186   1        tmpreg = SPIx->I2SCFGR;
*** ERROR C202 IN LINE 186 OF ..\..\library\src\stm32f10x_spi.c: 'tmpreg': undefined identifier
 187   1        
 188   1        /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
 189   1        if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
*** ERROR C202 IN LINE 189 OF ..\..\library\src\stm32f10x_spi.c: 'I2S_InitStruct': undefined identifier
 190   1        {
 191   2          i2sodd = (u16)0;
*** ERROR C202 IN LINE 191 OF ..\..\library\src\stm32f10x_spi.c: 'i2sodd': undefined identifier
*** ERROR C141 IN LINE 191 OF ..\..\library\src\stm32f10x_spi.c: syntax error near '0'
 192   2          i2sdiv = (u16)2;   
*** ERROR C202 IN LINE 192 OF ..\..\library\src\stm32f10x_spi.c: 'i2sdiv': undefined identifier
*** ERROR C141 IN LINE 192 OF ..\..\library\src\stm32f10x_spi.c: syntax error near '2'
 193   2        }
 194   1        /* If the requested audio frequency is not the default, compute the prescaler */
 195   1        else
 196   1        {
 197   2          /* Check the frame length (For the Prescaler computing) */
 198   2          if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
*** ERROR C202 IN LINE 198 OF ..\..\library\src\stm32f10x_spi.c: 'I2S_InitStruct': undefined identifier
 199   2          {
 200   3            /* Packet length is 16 bits */
 201   3            packetlength = 1;
*** ERROR C202 IN LINE 201 OF ..\..\library\src\stm32f10x_spi.c: 'packetlength': undefined identifier
 202   3          }
 203   2          else
 204   2          {
 205   3            /* Packet length is 32 bits */
 206   3            packetlength = 2;
*** ERROR C202 IN LINE 206 OF ..\..\library\src\stm32f10x_spi.c: 'packetlength': undefined identifier
 207   3          }
 208   2          /* Get System Clock frequency */
 209   2          RCC_GetClocksFreq(&RCC_Clocks);
*** ERROR C202 IN LINE 209 OF ..\..\library\src\stm32f10x_spi.c: 'RCC_Clocks': undefined identifier
 210   2          
 211   2          /* Compute the Real divider depending on the MCLK output state with a flaoting point */
 212   2          if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
*** ERROR C202 IN LINE 212 OF ..\..\library\src\stm32f10x_spi.c: 'I2S_InitStruct': undefined identifier
 213   2          {
 214   3            /* MCLK output is enabled */
 215   3            tmp = (u16)(((10 * RCC_Clocks.SYSCLK_Frequency) / (256 * I2S_InitStruct->I2S_AudioFreq)) + 5);
*** ERROR C202 IN LINE 215 OF ..\..\library\src\stm32f10x_spi.c: 'tmp': undefined identifier
 216   3          }
 217   2          else
 218   2          {
 219   3            /* MCLK output is disabled */
 220   3            tmp = (u16)(((10 * RCC_Clocks.SYSCLK_Frequency) / (32 * packetlength * I2S_InitStruct->I2S_AudioFreq
             -)) + 5);
*** ERROR C202 IN LINE 220 OF ..\..\library\src\stm32f10x_spi.c: 'tmp': undefined identifier
 221   3          }
 222   2          
 223   2          /* Remove the flaoting point */
 224   2          tmp = tmp/10;  
*** ERROR C202 IN LINE 224 OF ..\..\library\src\stm32f10x_spi.c: 'tmp': undefined identifier
 225   2            
 226   2          /* Check the parity of the divider */
 227   2          i2sodd = (u16)(tmp & (u16)0x0001);
*** ERROR C202 IN LINE 227 OF ..\..\library\src\stm32f10x_spi.c: 'i2sodd': undefined identifier
C51 COMPILER V9.05   STM32F10X_SPI                                                         06/03/2012 17:04:55 PAGE 6   

*** ERROR C141 IN LINE 227 OF ..\..\library\src\stm32f10x_spi.c: syntax error near '0x0001'
 228   2         
 229   2          /* Compute the i2sdiv prescaler */
 230   2          i2sdiv = (u16)((tmp - i2sodd) / 2);
*** ERROR C202 IN LINE 230 OF ..\..\library\src\stm32f10x_spi.c: 'i2sdiv': undefined identifier
 231   2         
 232   2          /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
 233   2          i2sodd = (u16) (i2sodd << 8);
*** ERROR C202 IN LINE 233 OF ..\..\library\src\stm32f10x_spi.c: 'i2sodd': undefined identifier
 234   2        }
 235   1        
 236   1        /* Test if the divider is 1 or 0 */
 237   1        if ((i2sdiv < 2) || (i2sdiv > 0xFF))
*** ERROR C202 IN LINE 237 OF ..\..\library\src\stm32f10x_spi.c: 'i2sdiv': undefined identifier
 238   1        {
 239   2          /* Set the default values */
 240   2          i2sdiv = 2;
*** ERROR C202 IN LINE 240 OF ..\..\library\src\stm32f10x_spi.c: 'i2sdiv': undefined identifier
 241   2          i2sodd = 0;
*** ERROR C202 IN LINE 241 OF ..\..\library\src\stm32f10x_spi.c: 'i2sodd': undefined identifier
 242   2        }
 243   1      
 244   1        /* Write to SPIx I2SPR register the computed value */
 245   1        SPIx->I2SPR = (u16)(i2sdiv | i2sodd | I2S_InitStruct->I2S_MCLKOutput);  
*** ERROR C202 IN LINE 245 OF ..\..\library\src\stm32f10x_spi.c: 'SPIx': undefined identifier
 246   1       
 247   1        /* Configure the I2S with the SPI_InitStruct values */
 248   1        tmpreg |= (u16)(I2S_Mode_Select | I2S_InitStruct->I2S_Mode | \
*** ERROR C202 IN LINE 248 OF ..\..\library\src\stm32f10x_spi.c: 'tmpreg': undefined identifier
*** ERROR C141 IN LINE 248 OF ..\..\library\src\stm32f10x_spi.c: syntax error near '0x0800'
 249   1                        I2S_InitStruct->I2S_Standard | I2S_InitStruct->I2S_DataFormat | \
 250   1                        I2S_InitStruct->I2S_CPOL);
 251   1       
 252   1        /* Write to SPIx I2SCFGR */  
 253   1        SPIx->I2SCFGR = tmpreg;                                    
*** ERROR C202 IN LINE 253 OF ..\..\library\src\stm32f10x_spi.c: 'SPIx': undefined identifier
 254   1      }
 255          
 256          /*******************************************************************************
 257          * Function Name  : SPI_StructInit
 258          * Description    : Fills each SPI_InitStruct member with its default value.
 259          * Input          : - SPI_InitStruct : pointer to a SPI_InitTypeDef structure
 260          *                    which will be initialized.
 261          * Output         : None
 262          * Return         : None
 263          *******************************************************************************/
 264          void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
*** ERROR C141 IN LINE 264 OF ..\..\library\src\stm32f10x_spi.c: syntax error near '*', expected ')'
 265          {
 266   1      /*--------------- Reset SPI init structure parameters values -----------------*/
 267   1        /* Initialize the SPI_Direction member */
 268   1        SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
*** ERROR C202 IN LINE 268 OF ..\..\library\src\stm32f10x_spi.c: 'SPI_InitStruct': undefined identifier
 269   1      
 270   1        /* initialize the SPI_Mode member */
 271   1        SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
*** ERROR C202 IN LINE 271 OF ..\..\library\src\stm32f10x_spi.c: 'SPI_InitStruct': undefined identifier
 272   1      
 273   1        /* initialize the SPI_DataSize member */
 274   1        SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
*** ERROR C202 IN LINE 274 OF ..\..\library\src\stm32f10x_spi.c: 'SPI_InitStruct': undefined identifier
 275   1      
C51 COMPILER V9.05   STM32F10X_SPI                                                         06/03/2012 17:04:55 PAGE 7   

 276   1        /* Initialize the SPI_CPOL member */
 277   1        SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
*** ERROR C202 IN LINE 277 OF ..\..\library\src\stm32f10x_spi.c: 'SPI_InitStruct': undefined identifier
 278   1      
 279   1        /* Initialize the SPI_CPHA member */
 280   1        SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
*** ERROR C202 IN LINE 280 OF ..\..\library\src\stm32f10x_spi.c: 'SPI_InitStruct': undefined identifier
 281   1      
 282   1        /* Initialize the SPI_NSS member */
 283   1        SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
*** ERROR C202 IN LINE 283 OF ..\..\library\src\stm32f10x_spi.c: 'SPI_InitStruct': undefined identifier
 284   1      
 285   1        /* Initialize the SPI_BaudRatePrescaler member */
 286   1        SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
*** ERROR C202 IN LINE 286 OF ..\..\library\src\stm32f10x_spi.c: 'SPI_InitStruct': undefined identifier
 287   1      
 288   1        /* Initialize the SPI_FirstBit member */
 289   1        SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
*** ERROR C202 IN LINE 289 OF ..\..\library\src\stm32f10x_spi.c: 'SPI_InitStruct': undefined identifier
 290   1      
 291   1        /* Initialize the SPI_CRCPolynomial member */
 292   1        SPI_InitStruct->SPI_CRCPolynomial = 7;
*** ERROR C202 IN LINE 292 OF ..\..\library\src\stm32f10x_spi.c: 'SPI_InitStruct': undefined identifier
 293   1      }
 294          
 295          /*******************************************************************************
 296          * Function Name  : I2S_StructInit
 297          * Description    : Fills each I2S_InitStruct member with its default value.
 298          * Input          : - I2S_InitStruct : pointer to a I2S_InitTypeDef structure
 299          *                    which will be initialized.
 300          * Output         : None
 301          * Return         : None
 302          *******************************************************************************/
 303          void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
*** ERROR C141 IN LINE 303 OF ..\..\library\src\stm32f10x_spi.c: syntax error near '*', expected ')'
 304          {
 305   1      /*--------------- Reset I2S init structure parameters values -----------------*/
 306   1        /* Initialize the I2S_Mode member */
 307   1        I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
*** ERROR C202 IN LINE 307 OF ..\..\library\src\stm32f10x_spi.c: 'I2S_InitStruct': undefined identifier
 308   1        
 309   1        /* Initialize the I2S_Standard member */
 310   1        I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
*** ERROR C202 IN LINE 310 OF ..\..\library\src\stm32f10x_spi.c: 'I2S_InitStruct': undefined identifier
 311   1        
 312   1        /* Initialize the I2S_DataFormat member */
 313   1        I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
*** ERROR C202 IN LINE 313 OF ..\..\library\src\stm32f10x_spi.c: 'I2S_InitStruct': undefined identifier
 314   1        
 315   1        /* Initialize the I2S_MCLKOutput member */
 316   1        I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
*** ERROR C202 IN LINE 316 OF ..\..\library\src\stm32f10x_spi.c: 'I2S_InitStruct': undefined identifier
 317   1        
 318   1        /* Initialize the I2S_AudioFreq member */
 319   1        I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
*** ERROR C202 IN LINE 319 OF ..\..\library\src\stm32f10x_spi.c: 'I2S_InitStruct': undefined identifier
 320   1        
 321   1        /* Initialize the I2S_CPOL member */
 322   1        I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
*** ERROR C202 IN LINE 322 OF ..\..\library\src\stm32f10x_spi.c: 'I2S_InitStruct': undefined identifier
 323   1      }
 324          
C51 COMPILER V9.05   STM32F10X_SPI                                                         06/03/2012 17:04:55 PAGE 8   

 325          /*******************************************************************************
 326          * Function Name  : SPI_Cmd
 327          * Description    : Enables or disables the specified SPI peripheral.
 328          * Input          : - SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 329          *                  - NewState: new state of the SPIx peripheral. 
 330          *                    This parameter can be: ENABLE or DISABLE.
 331          * Output         : None
 332          * Return         : None
 333          *******************************************************************************/
 334          void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
*** ERROR C141 IN LINE 334 OF ..\..\library\src\stm32f10x_spi.c: syntax error near '*', expected ')'
 335          {
 336   1        /* Check the parameters */
 337   1        assert_param(IS_SPI_ALL_PERIPH(SPIx));
*** ERROR C202 IN LINE 337 OF ..\..\library\src\stm32f10x_spi.c: 'SPIx': undefined identifier
 338   1        assert_param(IS_FUNCTIONAL_STATE(NewState));
*** ERROR C202 IN LINE 338 OF ..\..\library\src\stm32f10x_spi.c: 'NewState': undefined identifier
 339   1      
 340   1        if (NewState != DISABLE)
*** ERROR C202 IN LINE 340 OF ..\..\library\src\stm32f10x_spi.c: 'NewState': undefined identifier
 341   1        {
 342   2          /* Enable the selected SPI peripheral */
 343   2          SPIx->CR1 |= CR1_SPE_Set;
*** ERROR C202 IN LINE 343 OF ..\..\library\src\stm32f10x_spi.c: 'SPIx': undefined identifier
*** ERROR C141 IN LINE 343 OF ..\..\library\src\stm32f10x_spi.c: syntax error near '0x0040'
*** ERROR C141 IN LINE 343 OF ..\..\library\src\stm32f10x_spi.c: syntax error near ')'
 344   2        }
 345   1        else
 346   1        {
 347   2          /* Disable the selected SPI peripheral */
 348   2          SPIx->CR1 &= CR1_SPE_Reset;
*** ERROR C141 IN LINE 348 OF ..\..\library\src\stm32f10x_spi.c: syntax error near '0xFFBF'
*** ERROR C141 IN LINE 348 OF ..\..\library\src\stm32f10x_spi.c: syntax error near ')'
 349   2        }
 350   1      }
 351          
 352          /*******************************************************************************
 353          * Function Name  : I2S_Cmd
 354          * Description    : Enables or disables the specified SPI peripheral (in I2S mode).
 355          * Input          : - SPIx: where x can be 2 or 3 to select the SPI peripheral.
 356          *                  - NewState: new state of the SPIx peripheral. 
 357          *                    This parameter can be: ENABLE or DISABLE.
 358          * Output         : None
 359          * Return         : None
 360          *******************************************************************************/
 361          void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
*** ERROR C141 IN LINE 361 OF ..\..\library\src\stm32f10x_spi.c: syntax error near '*', expected ')'
 362          {
 363   1        /* Check the parameters */
 364   1        assert_param(IS_SPI_23_PERIPH(SPIx));
 365   1        assert_param(IS_FUNCTIONAL_STATE(NewState));
*** ERROR C202 IN LINE 365 OF ..\..\library\src\stm32f10x_spi.c: 'NewState': undefined identifier
 366   1      
 367   1        if (NewState != DISABLE)
*** ERROR C202 IN LINE 367 OF ..\..\library\src\stm32f10x_spi.c: 'NewState': undefined identifier
 368   1        {
 369   2          /* Enable the selected SPI peripheral (in I2S mode) */
 370   2          SPIx->I2SCFGR |= I2SCFGR_I2SE_Set;
*** ERROR C202 IN LINE 370 OF ..\..\library\src\stm32f10x_spi.c: 'SPIx': undefined identifier
*** ERROR C141 IN LINE 370 OF ..\..\library\src\stm32f10x_spi.c: syntax error near '0x0400'
*** ERROR C141 IN LINE 370 OF ..\..\library\src\stm32f10x_spi.c: syntax error near ')'
 371   2        }
C51 COMPILER V9.05   STM32F10X_SPI                                                         06/03/2012 17:04:55 PAGE 9   

 372   1        else
 373   1        {
 374   2          /* Disable the selected SPI peripheral (in I2S mode) */
 375   2          SPIx->I2SCFGR &= I2SCFGR_I2SE_Reset;
*** ERROR C141 IN LINE 375 OF ..\..\library\src\stm32f10x_spi.c: syntax error near '0xFBFF'
*** ERROR C141 IN LINE 375 OF ..\..\library\src\stm32f10x_spi.c: syntax error near ')'
 376   2        }
 377   1      }
 378          
 379          /*******************************************************************************
 380          * Function Name  : SPI_I2S_ITConfig
 381          * Description    : Enables or disables the specified SPI/I2S interrupts.
 382          * Input          : - SPIx: where x can be :
 383          *                         - 1, 2 or 3 in SPI mode 
 384          *                         - 2 or 3 in I2S mode
 385          *                  - SPI_I2S_IT: specifies the SPI/I2S interrupt source to be 
 386          *                    enabled or disabled. 
 387          *                    This parameter can be one of the following values:
 388          *                       - SPI_I2S_IT_TXE: Tx buffer empty interrupt mask
 389          *                       - SPI_I2S_IT_RXNE: Rx buffer not empty interrupt mask
 390          *                       - SPI_I2S_IT_ERR: Error interrupt mask
 391          *                  - NewState: new state of the specified SPI/I2S interrupt.
 392          *                    This parameter can be: ENABLE or DISABLE.
 393          * Output         : None
 394          * Return         : None
 395          *******************************************************************************/
 396          void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, u8 SPI_I2S_IT, FunctionalState NewState)
*** ERROR C141 IN LINE 396 OF ..\..\library\src\stm32f10x_spi.c: syntax error near '*', expected ')'
 397          {
 398   1        u16 itpos = 0, itmask = 0 ;
*** ERROR C141 IN LINE 398 OF ..\..\library\src\stm32f10x_spi.c: syntax error near 'itpos'
 399   1      
 400   1        /* Check the parameters */
 401   1        assert_param(IS_SPI_ALL_PERIPH(SPIx));
*** ERROR C202 IN LINE 401 OF ..\..\library\src\stm32f10x_spi.c: 'SPIx': undefined identifier
 402   1        assert_param(IS_FUNCTIONAL_STATE(NewState));
*** ERROR C202 IN LINE 402 OF ..\..\library\src\stm32f10x_spi.c: 'NewState': undefined identifier
 403   1        assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
*** ERROR C202 IN LINE 403 OF ..\..\library\src\stm32f10x_spi.c: 'SPI_I2S_IT': undefined identifier
 404   1      
 405   1        /* Get the SPI/I2S IT index */
 406   1        itpos = SPI_I2S_IT >> 4;
*** ERROR C202 IN LINE 406 OF ..\..\library\src\stm32f10x_spi.c: 'itpos': undefined identifier
 407   1        /* Set the IT mask */
 408   1        itmask = (u16)((u16)1 << itpos);
*** ERROR C202 IN LINE 408 OF ..\..\library\src\stm32f10x_spi.c: 'itmask': undefined identifier
*** ERROR C141 IN LINE 408 OF ..\..\library\src\stm32f10x_spi.c: syntax error near '1'
 409   1      
 410   1        if (NewState != DISABLE)
*** ERROR C202 IN LINE 410 OF ..\..\library\src\stm32f10x_spi.c: 'NewState': undefined identifier
 411   1        {
 412   2          /* Enable the selected SPI/I2S interrupt */
 413   2          SPIx->CR2 |= itmask;
*** ERROR C202 IN LINE 413 OF ..\..\library\src\stm32f10x_spi.c: 'SPIx': undefined identifier
 414   2        }
 415   1        else
 416   1        {
 417   2          /* Disable the selected SPI/I2S interrupt */
 418   2          SPIx->CR2 &= (u16)~itmask;
*** ERROR C202 IN LINE 418 OF ..\..\library\src\stm32f10x_spi.c: 'SPIx': undefined identifier
*** ERROR C141 IN LINE 418 OF ..\..\library\src\stm32f10x_spi.c: syntax error near '~'
 419   2        }
C51 COMPILER V9.05   STM32F10X_SPI                                                         06/03/2012 17:04:55 PAGE 10  

 420   1      }
 421          
 422          /*******************************************************************************
 423          * Function Name  : SPI_I2S_DMACmd
 424          * Description    : Enables or disables the SPIx/I2Sx DMA interface.
 425          * Input          : - SPIx: where x can be :
 426          *                         - 1, 2 or 3 in SPI mode 
 427          *                         - 2 or 3 in I2S mode
 428          *                  - SPI_I2S_DMAReq: specifies the SPI/I2S DMA transfer request 
 429          *                    to be enabled or disabled. 
 430          *                    This parameter can be any combination of the following values:
 431          *                       - SPI_I2S_DMAReq_Tx: Tx buffer DMA transfer request
 432          *                       - SPI_I2S_DMAReq_Rx: Rx buffer DMA transfer request
 433          *                  - NewState: new state of the selected SPI/I2S DMA transfer 
 434          *                    request.
 435          *                    This parameter can be: ENABLE or DISABLE.
 436          * Output         : None
 437          * Return         : None
 438          *******************************************************************************/
 439          void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, u16 SPI_I2S_DMAReq, FunctionalState NewState)
*** ERROR C141 IN LINE 439 OF ..\..\library\src\stm32f10x_spi.c: syntax error near '*', expected ')'
 440          {
 441   1        /* Check the parameters */
 442   1        assert_param(IS_SPI_ALL_PERIPH(SPIx));
*** ERROR C202 IN LINE 442 OF ..\..\library\src\stm32f10x_spi.c: 'SPIx': undefined identifier
 443   1        assert_param(IS_FUNCTIONAL_STATE(NewState));
*** ERROR C202 IN LINE 443 OF ..\..\library\src\stm32f10x_spi.c: 'NewState': undefined identifier
 444   1        assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
*** ERROR C202 IN LINE 444 OF ..\..\library\src\stm32f10x_spi.c: 'SPI_I2S_DMAReq': undefined identifier
 445   1      
 446   1        if (NewState != DISABLE)
*** ERROR C202 IN LINE 446 OF ..\..\library\src\stm32f10x_spi.c: 'NewState': undefined identifier
 447   1        {
 448   2          /* Enable the selected SPI/I2S DMA requests */
 449   2          SPIx->CR2 |= SPI_I2S_DMAReq;
*** ERROR C202 IN LINE 449 OF ..\..\library\src\stm32f10x_spi.c: 'SPIx': undefined identifier
 450   2        }
 451   1        else
 452   1        {
 453   2          /* Disable the selected SPI/I2S DMA requests */
 454   2          SPIx->CR2 &= (u16)~SPI_I2S_DMAReq;
*** ERROR C202 IN LINE 454 OF ..\..\library\src\stm32f10x_spi.c: 'SPIx': undefined identifier
*** ERROR C141 IN LINE 454 OF ..\..\library\src\stm32f10x_spi.c: syntax error near '~'
 455   2        }
 456   1      }
 457          
 458          /*******************************************************************************
 459          * Function Name  : SPI_I2S_SendData
 460          * Description    : Transmits a Data through the SPIx/I2Sx peripheral.
 461          * Input          : - SPIx: where x can be :
 462          *                         - 1, 2 or 3 in SPI mode 
 463          *                         - 2 or 3 in I2S mode
 464          *                  - Data : Data to be transmitted..
 465          * Output         : None
 466          * Return         : None
 467          *******************************************************************************/
 468          void SPI_I2S_SendData(SPI_TypeDef* SPIx, u16 Data)
*** ERROR C141 IN LINE 468 OF ..\..\library\src\stm32f10x_spi.c: syntax error near '*', expected ')'
 469          {
 470   1        /* Check the parameters */
 471   1        assert_param(IS_SPI_ALL_PERIPH(SPIx));
*** ERROR C202 IN LINE 471 OF ..\..\library\src\stm32f10x_spi.c: 'SPIx': undefined identifier
C51 COMPILER V9.05   STM32F10X_SPI                                                         06/03/2012 17:04:55 PAGE 11  

 472   1        
 473   1        /* Write in the DR register the data to be sent */
 474   1        SPIx->DR = Data;
*** ERROR C202 IN LINE 474 OF ..\..\library\src\stm32f10x_spi.c: 'SPIx': undefined identifier
 475   1      }
 476          
 477          /*******************************************************************************
 478          * Function Name  : SPI_I2S_ReceiveData
 479          * Description    : Returns the most recent received data by the SPIx/I2Sx peripheral. 
 480          * Input          : - SPIx: where x can be :
 481          *                         - 1, 2 or 3 in SPI mode 
 482          *                         - 2 or 3 in I2S mode
 483          * Output         : None
 484          * Return         : The value of the received data.
 485          *******************************************************************************/
 486          u16 SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
*** ERROR C129 IN LINE 486 OF ..\..\library\src\stm32f10x_spi.c: missing ';' before 'SPI_I2S_ReceiveData'
 487          {
 488            /* Check the parameters */
 489            assert_param(IS_SPI_ALL_PERIPH(SPIx));
 490            
 491            /* Return the data in the DR register */
 492            return SPIx->DR;
 493          }
 494          
 495          /*******************************************************************************
 496          * Function Name  : SPI_NSSInternalSoftwareConfig
 497          * Description    : Configures internally by software the NSS pin for the selected 
 498          *                  SPI.
 499          * Input          : - SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 500          *                  - SPI_NSSInternalSoft: specifies the SPI NSS internal state.
 501          *                    This parameter can be one of the following values:
 502          *                       - SPI_NSSInternalSoft_Set: Set NSS pin internally
 503          *                       - SPI_NSSInternalSoft_Reset: Reset NSS pin internally
 504          * Output         : None
 505          * Return         : None
 506          *******************************************************************************/
 507          void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, u16 SPI_NSSInternalSoft)
 508          {
 509            /* Check the parameters */
 510            assert_param(IS_SPI_ALL_PERIPH(SPIx));
 511            assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
 512          
 513            if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 514            {
 515              /* Set NSS pin internally by software */
 516              SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 517            }
 518            else
 519            {
 520              /* Reset NSS pin internally by software */
 521              SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 522            }
 523          }
 524          
 525          /*******************************************************************************
 526          * Function Name  : SPI_SSOutputCmd
 527          * Description    : Enables or disables the SS output for the selected SPI.
 528          * Input          : - SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 529          *                  - NewState: new state of the SPIx SS output. 
 530          *                    This parameter can be: ENABLE or DISABLE.
 531          * Output         : None
C51 COMPILER V9.05   STM32F10X_SPI                                                         06/03/2012 17:04:55 PAGE 12  

 532          * Return         : None
 533          *******************************************************************************/
 534          void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 535          {
 536            /* Check the parameters */
 537            assert_param(IS_SPI_ALL_PERIPH(SPIx));
 538            assert_param(IS_FUNCTIONAL_STATE(NewState));
 539          
 540            if (NewState != DISABLE)
 541            {
 542              /* Enable the selected SPI SS output */
 543              SPIx->CR2 |= CR2_SSOE_Set;
 544            }
 545            else
 546            {
 547              /* Disable the selected SPI SS output */
 548              SPIx->CR2 &= CR2_SSOE_Reset;
 549            }
 550          }
 551          
 552          /*******************************************************************************
 553          * Function Name  : SPI_DataSizeConfig
 554          * Description    : Configures the data size for the selected SPI.
 555          * Input          : - SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 556          *                  - SPI_DataSize: specifies the SPI data size.
 557          *                    This parameter can be one of the following values:
 558          *                       - SPI_DataSize_16b: Set data frame format to 16bit
 559          *                       - SPI_DataSize_8b: Set data frame format to 8bit
 560          * Output         : None
 561          * Return         : None
 562          *******************************************************************************/
 563          void SPI_DataSizeConfig(SPI_TypeDef* SPIx, u16 SPI_DataSize)
 564          {
 565            /* Check the parameters */
 566            assert_param(IS_SPI_ALL_PERIPH(SPIx));
 567            assert_param(IS_SPI_DATASIZE(SPI_DataSize));
 568          
 569            /* Clear DFF bit */
 570            SPIx->CR1 &= (u16)~SPI_DataSize_16b;
 571            /* Set new DFF bit value */
 572            SPIx->CR1 |= SPI_DataSize;
 573          }
 574          
 575          /*******************************************************************************
 576          * Function Name  : SPI_TransmitCRC
 577          * Description    : Transmit the SPIx CRC value.
 578          * Input          : - SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 579          * Output         : None
 580          * Return         : None
 581          *******************************************************************************/
 582          void SPI_TransmitCRC(SPI_TypeDef* SPIx)
 583          {
 584            /* Check the parameters */
 585            assert_param(IS_SPI_ALL_PERIPH(SPIx));
 586            
 587            /* Enable the selected SPI CRC transmission */
 588            SPIx->CR1 |= CR1_CRCNext_Set;
 589          }
 590          
 591          /*******************************************************************************
 592          * Function Name  : SPI_CalculateCRC
 593          * Description    : Enables or disables the CRC value calculation of the
C51 COMPILER V9.05   STM32F10X_SPI                                                         06/03/2012 17:04:55 PAGE 13  

 594          *                  transfered bytes.
 595          * Input          : - SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 596          *                  - NewState: new state of the SPIx CRC value calculation.
 597          *                    This parameter can be: ENABLE or DISABLE.
 598          * Output         : None
 599          * Return         : None
 600          *******************************************************************************/
 601          void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
 602          {
 603            /* Check the parameters */
 604            assert_param(IS_SPI_ALL_PERIPH(SPIx));
 605            assert_param(IS_FUNCTIONAL_STATE(NewState));
 606          
 607            if (NewState != DISABLE)
 608            {
 609              /* Enable the selected SPI CRC calculation */
 610              SPIx->CR1 |= CR1_CRCEN_Set;
 611            }
 612            else
 613            {
 614              /* Disable the selected SPI CRC calculation */
 615              SPIx->CR1 &= CR1_CRCEN_Reset;
 616            }
 617          }
 618          
 619          /*******************************************************************************
 620          * Function Name  : SPI_GetCRC
 621          * Description    : Returns the transmit or the receive CRC register value for
 622          *                  the specified SPI.
 623          * Input          : - SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 624          *                  - SPI_CRC: specifies the CRC register to be read.
 625          *                    This parameter can be one of the following values:
 626          *                       - SPI_CRC_Tx: Selects Tx CRC register
 627          *                       - SPI_CRC_Rx: Selects Rx CRC register
 628          * Output         : None
 629          * Return         : The selected CRC register value..
 630          *******************************************************************************/
 631          u16 SPI_GetCRC(SPI_TypeDef* SPIx, u8 SPI_CRC)
 632          {
 633            u16 crcreg = 0;
 634          
 635            /* Check the parameters */
 636            assert_param(IS_SPI_ALL_PERIPH(SPIx));
 637            assert_param(IS_SPI_CRC(SPI_CRC));
 638          
 639            if (SPI_CRC != SPI_CRC_Rx)
 640            {
 641              /* Get the Tx CRC register */
 642              crcreg = SPIx->TXCRCR;
 643            }
 644            else
 645            {
 646              /* Get the Rx CRC register */
 647              crcreg = SPIx->RXCRCR;
 648            }
 649          
 650            /* Return the selected CRC register */
 651            return crcreg;
 652          }
 653          
 654          /*******************************************************************************
 655          * Function Name  : SPI_GetCRCPolynomial
C51 COMPILER V9.05   STM32F10X_SPI                                                         06/03/2012 17:04:55 PAGE 14  

 656          * Description    : Returns the CRC Polynomial register value for the specified SPI.
 657          * Input          : - SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 658          * Output         : None
 659          * Return         : The CRC Polynomial register value.
 660          *******************************************************************************/
 661          u16 SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
 662          {
 663            /* Check the parameters */
 664            assert_param(IS_SPI_ALL_PERIPH(SPIx));
 665            
 666            /* Return the CRC polynomial register */
 667            return SPIx->CRCPR;
 668          }
 669          
 670          /*******************************************************************************
 671          * Function Name  : SPI_BiDirectionalLineConfig
 672          * Description    : Selects the data transfer direction in bi-directional mode
 673          *                  for the specified SPI.
 674          * Input          : - SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 675          *                  - SPI_Direction: specifies the data transfer direction in
 676          *                    bi-directional mode. 
 677          *                    This parameter can be one of the following values:
 678          *                       - SPI_Direction_Tx: Selects Tx transmission direction
 679          *                       - SPI_Direction_Rx: Selects Rx receive direction
 680          * Output         : None
 681          * Return         : None
 682          *******************************************************************************/
 683          void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, u16 SPI_Direction)
 684          {
 685            /* Check the parameters */
 686            assert_param(IS_SPI_ALL_PERIPH(SPIx));
 687            assert_param(IS_SPI_DIRECTION(SPI_Direction));
 688          
 689            if (SPI_Direction == SPI_Direction_Tx)
 690            {
 691              /* Set the Tx only mode */
 692              SPIx->CR1 |= SPI_Direction_Tx;
 693            }
 694            else
 695            {
 696              /* Set the Rx only mode */
 697              SPIx->CR1 &= SPI_Direction_Rx;
 698            }
 699          }
 700          
 701          /*******************************************************************************
 702          * Function Name  : SPI_I2S_GetFlagStatus
 703          * Description    : Checks whether the specified SPI/I2S flag is set or not.
 704          * Input          : - SPIx: where x can be :
 705          *                         - 1, 2 or 3 in SPI mode 
 706          *                         - 2 or 3 in I2S mode
 707          *                  - SPI_I2S_FLAG: specifies the SPI/I2S flag to check. 
 708          *                    This parameter can be one of the following values:
 709          *                       - SPI_I2S_FLAG_TXE: Transmit buffer empty flag.
 710          *                       - SPI_I2S_FLAG_RXNE: Receive buffer not empty flag.
 711          *                       - SPI_I2S_FLAG_BSY: Busy flag.
 712          *                       - SPI_I2S_FLAG_OVR: Overrun flag.
 713          *                       - SPI_FLAG_MODF: Mode Fault flag.
 714          *                       - SPI_FLAG_CRCERR: CRC Error flag.
 715          *                       - I2S_FLAG_UDR: Underrun Error flag.
 716          *                       - I2S_FLAG_CHSIDE: Channel Side flag.
 717          * Output         : None
C51 COMPILER V9.05   STM32F10X_SPI                                                         06/03/2012 17:04:55 PAGE 15  

 718          * Return         : The new state of SPI_I2S_FLAG (SET or RESET).
 719          *******************************************************************************/
 720          FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, u16 SPI_I2S_FLAG)
 721          {
 722            FlagStatus bitstatus = RESET;
 723          
 724            /* Check the parameters */
 725            assert_param(IS_SPI_ALL_PERIPH(SPIx));
 726            assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
 727          
 728            /* Check the status of the specified SPI/I2S flag */
 729            if ((SPIx->SR & SPI_I2S_FLAG) != (u16)RESET)
 730            {
 731              /* SPI_I2S_FLAG is set */
 732              bitstatus = SET;
 733            }
 734            else
 735            {
 736              /* SPI_I2S_FLAG is reset */
 737              bitstatus = RESET;
 738            }
 739            /* Return the SPI_I2S_FLAG status */
 740            return  bitstatus;
 741          }
 742          
 743          /*******************************************************************************
 744          * Function Name  : SPI_I2S_ClearFlag
 745          * Description    : Clears the SPIx CRC Error (CRCERR) flag.
 746          * Input          : - SPIx: where x can be :
 747          *                         - 1, 2 or 3 in SPI mode 
 748          *                  - SPI_I2S_FLAG: specifies the SPI flag to clear. 
 749          *                    This function clears only CRCERR flag.                                           
 750          *                  Notes:
 751          *                       - OVR (OverRun error) flag is cleared by software 
 752          *                         sequence: a read operation to SPI_DR register 
 753          *                         (SPI_I2S_ReceiveData()) followed by a read operation 
 754          *                         to SPI_SR register (SPI_I2S_GetFlagStatus()).                           
 755          *                       - UDR (UnderRun error) flag is cleared by a read 
 756          *                         operation to SPI_SR register (SPI_I2S_GetFlagStatus()).                         
             -    
 757          *                       - MODF (Mode Fault) flag is cleared by software sequence: 
 758          *                         a read/write operation to SPI_SR register 
 759          *                         (SPI_I2S_GetFlagStatus()) followed by a write 
 760          *                         operation to SPI_CR1 register (SPI_Cmd() to enable 
 761          *                         the SPI).   
 762          * Output         : None
 763          * Return         : None
 764          *******************************************************************************/
 765          void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, u16 SPI_I2S_FLAG)
 766          {
 767            /* Check the parameters */
 768            assert_param(IS_SPI_ALL_PERIPH(SPIx));
 769            assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
 770              
 771              /* Clear the selected SPI CRC Error (CRCERR) flag */
 772              SPIx->SR = (u16)~SPI_I2S_FLAG;
 773          }
 774          
 775          /*******************************************************************************
 776          * Function Name  : SPI_I2S_GetITStatus
 777          * Description    : Checks whether the specified SPI/I2S interrupt has occurred or not.
 778          * Input          : - SPIx: where x can be :
C51 COMPILER V9.05   STM32F10X_SPI                                                         06/03/2012 17:04:55 PAGE 16  

 779          *                         - 1, 2 or 3 in SPI mode 
 780          *                         - 2 or 3 in I2S mode
 781          *                  - SPI_I2S_IT: specifies the SPI/I2S interrupt source to check. 
 782          *                    This parameter can be one of the following values:
 783          *                       - SPI_I2S_IT_TXE: Transmit buffer empty interrupt.
 784          *                       - SPI_I2S_IT_RXNE: Receive buffer not empty interrupt.
 785          *                       - SPI_I2S_IT_OVR: Overrun interrupt.
 786          *                       - SPI_IT_MODF: Mode Fault interrupt.
 787          *                       - SPI_IT_CRCERR: CRC Error interrupt.
 788          *                       - I2S_IT_UDR: Underrun Error interrupt.
 789          * Output         : None
 790          * Return         : The new state of SPI_I2S_IT (SET or RESET).
 791          *******************************************************************************/
 792          ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, u8 SPI_I2S_IT)
 793          {
 794            ITStatus bitstatus = RESET;
 795            u16 itpos = 0, itmask = 0, enablestatus = 0;
 796          
 797            /* Check the parameters */
 798            assert_param(IS_SPI_ALL_PERIPH(SPIx));
 799            assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
 800          
 801            /* Get the SPI/I2S IT index */
 802            itpos = (u16)((u16)0x01 << (SPI_I2S_IT & (u8)0x0F));
 803          
 804            /* Get the SPI/I2S IT mask */
 805            itmask = SPI_I2S_IT >> 4;
 806            /* Set the IT mask */
 807            itmask = (u16)((u16)0x01 << itmask);
 808            /* Get the SPI_I2S_IT enable bit status */
 809            enablestatus = (SPIx->CR2 & itmask) ;
 810          
 811            /* Check the status of the specified SPI/I2S interrupt */
 812            if (((SPIx->SR & itpos) != (u16)RESET) && enablestatus)
 813            {
 814              /* SPI_I2S_IT is set */
 815              bitstatus = SET;
 816            }
 817            else
 818            {
 819              /* SPI_I2S_IT is reset */
 820              bitstatus = RESET;
 821            }
 822            /* Return the SPI_I2S_IT status */
 823            return bitstatus;
 824          }
 825          
 826          /*******************************************************************************
 827          * Function Name  : SPI_I2S_ClearITPendingBit
 828          * Description    : Clears the SPIx CRC Error (CRCERR) interrupt pending bit.
 829          * Input          : - SPIx: where x can be :
 830          *                         - 1, 2 or 3 in SPI mode 
 831          *                  - SPI_I2S_IT: specifies the SPI interrupt pending bit to clear.
 832          *                    This function clears only CRCERR intetrrupt pending bit.   
 833          *                  Notes:
 834          *                       - OVR (OverRun Error) interrupt pending bit is cleared 
 835          *                         by software sequence: a read operation to SPI_DR 
 836          *                         register (SPI_I2S_ReceiveData()) followed by a read 
 837          *                         operation to SPI_SR register (SPI_I2S_GetITStatus()).
 838          *                       - UDR (UnderRun Error) interrupt pending bit is cleared 
 839          *                         by a read operation to SPI_SR register 
 840          *                         (SPI_I2S_GetITStatus()).                           
C51 COMPILER V9.05   STM32F10X_SPI                                                         06/03/2012 17:04:55 PAGE 17  

 841          *                       - MODF (Mode Fault) interrupt pending bit is cleared by 
 842          *                         software sequence: a read/write operation to SPI_SR 
 843          *                         register (SPI_I2S_GetITStatus()) followed by a write 
 844          *                         operation to SPI_CR1 register (SPI_Cmd() to enable the 
 845          *                         SPI).   
 846          * Output         : None
 847          * Return         : None
 848          *******************************************************************************/
 849          void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, u8 SPI_I2S_IT)
 850          {
 851            u16 itpos = 0;
 852          
 853            /* Check the parameters */
 854            assert_param(IS_SPI_ALL_PERIPH(SPIx));
 855            assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));
 856          
 857            /* Get the SPI IT index */
 858            itpos = (u16)((u16)0x01 << (SPI_I2S_IT & (u8)0x0F));
 859            /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
 860            SPIx->SR = (u16)~itpos;
 861          }
 862          
 863          /******************* (C) COPYRIGHT 2008 STMicroelectronics *****END OF FILE****/

C51 COMPILATION COMPLETE.  2 WARNING(S),  140 ERROR(S)
