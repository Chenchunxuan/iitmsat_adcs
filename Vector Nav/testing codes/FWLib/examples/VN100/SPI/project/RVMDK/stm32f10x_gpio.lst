C51 COMPILER V9.05   STM32F10X_GPIO                                                        06/03/2012 17:04:54 PAGE 1   


C51 COMPILER V9.05, COMPILATION OF MODULE STM32F10X_GPIO
OBJECT MODULE PLACED IN .\stm32f10x_gpio.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\..\library\src\stm32f10x_gpio.c DEBUG OBJECTEXTEND PRINT(.\stm32f10x_gpi
                    -o.lst) OBJECT(.\stm32f10x_gpio.obj)

line level    source

   1          /******************** (C) COPYRIGHT 2008 STMicroelectronics ********************
   2          * File Name          : stm32f10x_gpio.c
   3          * Author             : MCD Application Team
   4          * Version            : V2.0.3
   5          * Date               : 09/22/2008
   6          * Description        : This file provides all the GPIO firmware functions.
   7          ********************************************************************************
   8          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
   9          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
  10          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
  11          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
  12          * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
  13          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  14          *******************************************************************************/
  15          
  16          /* Includes ------------------------------------------------------------------*/
  17          #include "stm32f10x_gpio.h"
*** WARNING C318 IN LINE 17 OF ..\..\library\src\stm32f10x_gpio.c: can't open file 'stm32f10x_gpio.h'
  18          #include "stm32f10x_rcc.h"
*** WARNING C318 IN LINE 18 OF ..\..\library\src\stm32f10x_gpio.c: can't open file 'stm32f10x_rcc.h'
  19          
  20          /* Private typedef -----------------------------------------------------------*/
  21          /* Private define ------------------------------------------------------------*/
  22          /* ------------ RCC registers bit address in the alias region ----------- */
  23          #define AFIO_OFFSET                 (AFIO_BASE - PERIPH_BASE)
  24          
  25          /* --- EVENTCR Register ---*/
  26          /* Alias word address of EVOE bit */
  27          #define EVCR_OFFSET                 (AFIO_OFFSET + 0x00)
  28          #define EVOE_BitNumber              ((u8)0x07)
  29          #define EVCR_EVOE_BB                (PERIPH_BB_BASE + (EVCR_OFFSET * 32) + (EVOE_BitNumber * 4))
  30          
  31          #define EVCR_PORTPINCONFIG_MASK     ((u16)0xFF80)
  32          #define LSB_MASK                    ((u16)0xFFFF)
  33          #define DBGAFR_POSITION_MASK        ((u32)0x000F0000)
  34          #define DBGAFR_SWJCFG_MASK          ((u32)0xF0FFFFFF)
  35          #define DBGAFR_LOCATION_MASK        ((u32)0x00200000)
  36          #define DBGAFR_NUMBITS_MASK         ((u32)0x00100000)
  37          
  38          /* Private macro -------------------------------------------------------------*/
  39          /* Private variables ---------------------------------------------------------*/
  40          /* Private function prototypes -----------------------------------------------*/
  41          /* Private functions ---------------------------------------------------------*/
  42          
  43          /*******************************************************************************
  44          * Function Name  : GPIO_DeInit
  45          * Description    : Deinitializes the GPIOx peripheral registers to their default
  46          *                  reset values.
  47          * Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
  48          * Output         : None
  49          * Return         : None
  50          *******************************************************************************/
  51          void GPIO_DeInit(GPIO_TypeDef* GPIOx)
*** ERROR C141 IN LINE 51 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near '*', expected ')'
C51 COMPILER V9.05   STM32F10X_GPIO                                                        06/03/2012 17:04:54 PAGE 2   

  52          {
  53   1        /* Check the parameters */
  54   1        assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
*** ERROR C202 IN LINE 54 OF ..\..\library\src\stm32f10x_gpio.c: 'GPIOx': undefined identifier
  55   1        
  56   1        switch (*(u32*)&GPIOx)
*** ERROR C202 IN LINE 56 OF ..\..\library\src\stm32f10x_gpio.c: 'u32': undefined identifier
*** ERROR C141 IN LINE 56 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near ')'
*** ERROR C202 IN LINE 56 OF ..\..\library\src\stm32f10x_gpio.c: 'GPIOx': undefined identifier
*** ERROR C141 IN LINE 56 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near ')'
  57   1        {
  58   2          case GPIOA_BASE:
  59   2            RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
  60   2            RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
*** ERROR C202 IN LINE 60 OF ..\..\library\src\stm32f10x_gpio.c: 'RCC_APB2Periph_GPIOA': undefined identifier
  61   2            break;
*** ERROR C171 IN LINE 61 OF ..\..\library\src\stm32f10x_gpio.c: 'break': missing enclosing loop
  62   2      
  63   2          case GPIOB_BASE:
*** ERROR C202 IN LINE 63 OF ..\..\library\src\stm32f10x_gpio.c: 'GPIOB_BASE': undefined identifier
*** ERROR C172 IN LINE 63 OF ..\..\library\src\stm32f10x_gpio.c: 'case': missing enclosing switch
  64   2            RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
  65   2            RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
*** ERROR C202 IN LINE 65 OF ..\..\library\src\stm32f10x_gpio.c: 'RCC_APB2Periph_GPIOB': undefined identifier
  66   2            break;
*** ERROR C171 IN LINE 66 OF ..\..\library\src\stm32f10x_gpio.c: 'break': missing enclosing loop
  67   2      
  68   2          case GPIOC_BASE:
*** ERROR C202 IN LINE 68 OF ..\..\library\src\stm32f10x_gpio.c: 'GPIOC_BASE': undefined identifier
*** ERROR C172 IN LINE 68 OF ..\..\library\src\stm32f10x_gpio.c: 'case': missing enclosing switch
  69   2            RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
  70   2            RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
*** ERROR C202 IN LINE 70 OF ..\..\library\src\stm32f10x_gpio.c: 'RCC_APB2Periph_GPIOC': undefined identifier
  71   2            break;
*** ERROR C171 IN LINE 71 OF ..\..\library\src\stm32f10x_gpio.c: 'break': missing enclosing loop
  72   2      
  73   2          case GPIOD_BASE:
*** ERROR C202 IN LINE 73 OF ..\..\library\src\stm32f10x_gpio.c: 'GPIOD_BASE': undefined identifier
*** ERROR C172 IN LINE 73 OF ..\..\library\src\stm32f10x_gpio.c: 'case': missing enclosing switch
  74   2            RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
  75   2            RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
*** ERROR C202 IN LINE 75 OF ..\..\library\src\stm32f10x_gpio.c: 'RCC_APB2Periph_GPIOD': undefined identifier
  76   2            break;
*** ERROR C171 IN LINE 76 OF ..\..\library\src\stm32f10x_gpio.c: 'break': missing enclosing loop
  77   2            
  78   2          case GPIOE_BASE:
*** ERROR C202 IN LINE 78 OF ..\..\library\src\stm32f10x_gpio.c: 'GPIOE_BASE': undefined identifier
*** ERROR C172 IN LINE 78 OF ..\..\library\src\stm32f10x_gpio.c: 'case': missing enclosing switch
  79   2            RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
  80   2            RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
*** ERROR C202 IN LINE 80 OF ..\..\library\src\stm32f10x_gpio.c: 'RCC_APB2Periph_GPIOE': undefined identifier
  81   2            break; 
*** ERROR C171 IN LINE 81 OF ..\..\library\src\stm32f10x_gpio.c: 'break': missing enclosing loop
  82   2      
  83   2          case GPIOF_BASE:
*** ERROR C202 IN LINE 83 OF ..\..\library\src\stm32f10x_gpio.c: 'GPIOF_BASE': undefined identifier
*** ERROR C172 IN LINE 83 OF ..\..\library\src\stm32f10x_gpio.c: 'case': missing enclosing switch
  84   2            RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
  85   2            RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
*** ERROR C202 IN LINE 85 OF ..\..\library\src\stm32f10x_gpio.c: 'RCC_APB2Periph_GPIOF': undefined identifier
  86   2            break;
*** ERROR C171 IN LINE 86 OF ..\..\library\src\stm32f10x_gpio.c: 'break': missing enclosing loop
C51 COMPILER V9.05   STM32F10X_GPIO                                                        06/03/2012 17:04:54 PAGE 3   

  87   2      
  88   2          case GPIOG_BASE:
*** ERROR C202 IN LINE 88 OF ..\..\library\src\stm32f10x_gpio.c: 'GPIOG_BASE': undefined identifier
*** ERROR C172 IN LINE 88 OF ..\..\library\src\stm32f10x_gpio.c: 'case': missing enclosing switch
  89   2            RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
  90   2            RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
*** ERROR C202 IN LINE 90 OF ..\..\library\src\stm32f10x_gpio.c: 'RCC_APB2Periph_GPIOG': undefined identifier
  91   2            break;                       
*** ERROR C171 IN LINE 91 OF ..\..\library\src\stm32f10x_gpio.c: 'break': missing enclosing loop
  92   2      
  93   2          default:
*** ERROR C172 IN LINE 93 OF ..\..\library\src\stm32f10x_gpio.c: 'default': missing enclosing switch
  94   2            break;
*** ERROR C171 IN LINE 94 OF ..\..\library\src\stm32f10x_gpio.c: 'break': missing enclosing loop
  95   2        }
  96   1      }
  97          
  98          /*******************************************************************************
  99          * Function Name  : GPIO_AFIODeInit
 100          * Description    : Deinitializes the Alternate Functions (remap, event control
 101          *                  and EXTI configuration) registers to their default reset
 102          *                  values.
 103          * Input          : None
 104          * Output         : None
 105          * Return         : None
 106          *******************************************************************************/
 107          void GPIO_AFIODeInit(void)
 108          {
 109   1        RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
*** ERROR C202 IN LINE 109 OF ..\..\library\src\stm32f10x_gpio.c: 'RCC_APB2Periph_AFIO': undefined identifier
 110   1        RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
*** ERROR C202 IN LINE 110 OF ..\..\library\src\stm32f10x_gpio.c: 'RCC_APB2Periph_AFIO': undefined identifier
 111   1      }
 112          
 113          /*******************************************************************************
 114          * Function Name  : GPIO_Init
 115          * Description    : Initializes the GPIOx peripheral according to the specified
 116          *                  parameters in the GPIO_InitStruct.
 117          * Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
 118          *                  - GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
 119          *                    contains the configuration information for the specified GPIO
 120          *                    peripheral.
 121          * Output         : None
 122          * Return         : None
 123          *******************************************************************************/
 124          void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
*** ERROR C141 IN LINE 124 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near '*', expected ')'
 125          {
 126   1        u32 currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
*** ERROR C202 IN LINE 126 OF ..\..\library\src\stm32f10x_gpio.c: 'u32': undefined identifier
*** ERROR C141 IN LINE 126 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near 'currentmode'
 127   1        u32 tmpreg = 0x00, pinmask = 0x00;
*** ERROR C202 IN LINE 127 OF ..\..\library\src\stm32f10x_gpio.c: 'u32': undefined identifier
*** ERROR C141 IN LINE 127 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near 'tmpreg'
 128   1      
 129   1        /* Check the parameters */
 130   1        assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
*** ERROR C202 IN LINE 130 OF ..\..\library\src\stm32f10x_gpio.c: 'GPIOx': undefined identifier
 131   1        assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
*** ERROR C202 IN LINE 131 OF ..\..\library\src\stm32f10x_gpio.c: 'GPIO_InitStruct': undefined identifier
 132   1        assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
*** ERROR C202 IN LINE 132 OF ..\..\library\src\stm32f10x_gpio.c: 'GPIO_InitStruct': undefined identifier
C51 COMPILER V9.05   STM32F10X_GPIO                                                        06/03/2012 17:04:54 PAGE 4   

 133   1        
 134   1      /*---------------------------- GPIO Mode Configuration -----------------------*/
 135   1        currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
*** ERROR C202 IN LINE 135 OF ..\..\library\src\stm32f10x_gpio.c: 'currentmode': undefined identifier
*** ERROR C141 IN LINE 135 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near 'GPIO_InitStruct'
*** ERROR C141 IN LINE 135 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near ')'
*** ERROR C141 IN LINE 135 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near '0x0F'
*** ERROR C141 IN LINE 135 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near ')'
 136   1      
 137   1        if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
*** ERROR C141 IN LINE 137 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near 'GPIO_InitStruct'
*** ERROR C202 IN LINE 137 OF ..\..\library\src\stm32f10x_gpio.c: 'u32': undefined identifier
*** ERROR C141 IN LINE 137 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near '0x10'
*** ERROR C141 IN LINE 137 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near ')'
*** ERROR C141 IN LINE 137 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near ')'
 138   1        { 
 139   2          /* Check the parameters */
 140   2          assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
 141   2          /* Output mode */
 142   2          currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
*** ERROR C202 IN LINE 142 OF ..\..\library\src\stm32f10x_gpio.c: 'currentmode': undefined identifier
*** ERROR C141 IN LINE 142 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near 'GPIO_InitStruct'
 143   2        }
 144   1      
 145   1      /*---------------------------- GPIO CRL Configuration ------------------------*/
 146   1        /* Configure the eight low port pins */
 147   1        if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
*** ERROR C202 IN LINE 147 OF ..\..\library\src\stm32f10x_gpio.c: 'u32': undefined identifier
*** ERROR C141 IN LINE 147 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near 'GPIO_InitStruct'
*** ERROR C141 IN LINE 147 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near ')'
*** ERROR C141 IN LINE 147 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near ')'
 148   1        {
 149   2          tmpreg = GPIOx->CRL;
*** ERROR C202 IN LINE 149 OF ..\..\library\src\stm32f10x_gpio.c: 'tmpreg': undefined identifier
 150   2      
 151   2          for (pinpos = 0x00; pinpos < 0x08; pinpos++)
*** ERROR C202 IN LINE 151 OF ..\..\library\src\stm32f10x_gpio.c: 'pinpos': undefined identifier
 152   2          {
 153   3            pos = ((u32)0x01) << pinpos;
*** ERROR C202 IN LINE 153 OF ..\..\library\src\stm32f10x_gpio.c: 'pos': undefined identifier
*** ERROR C141 IN LINE 153 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near '0x01'
*** ERROR C141 IN LINE 153 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near ')'
 154   3            /* Get the port pins position */
 155   3            currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
*** ERROR C202 IN LINE 155 OF ..\..\library\src\stm32f10x_gpio.c: 'currentpin': undefined identifier
 156   3      
 157   3            if (currentpin == pos)
*** ERROR C202 IN LINE 157 OF ..\..\library\src\stm32f10x_gpio.c: 'currentpin': undefined identifier
 158   3            {
 159   4              pos = pinpos << 2;
*** ERROR C202 IN LINE 159 OF ..\..\library\src\stm32f10x_gpio.c: 'pos': undefined identifier
 160   4              /* Clear the corresponding low control register bits */
 161   4              pinmask = ((u32)0x0F) << pos;
*** ERROR C202 IN LINE 161 OF ..\..\library\src\stm32f10x_gpio.c: 'pinmask': undefined identifier
*** ERROR C141 IN LINE 161 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near '0x0F'
*** ERROR C141 IN LINE 161 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near ')'
 162   4              tmpreg &= ~pinmask;
*** ERROR C202 IN LINE 162 OF ..\..\library\src\stm32f10x_gpio.c: 'tmpreg': undefined identifier
 163   4      
 164   4              /* Write the mode configuration in the corresponding bits */
 165   4              tmpreg |= (currentmode << pos);
*** ERROR C202 IN LINE 165 OF ..\..\library\src\stm32f10x_gpio.c: 'tmpreg': undefined identifier
C51 COMPILER V9.05   STM32F10X_GPIO                                                        06/03/2012 17:04:54 PAGE 5   

 166   4      
 167   4              /* Reset the corresponding ODR bit */
 168   4              if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
*** ERROR C202 IN LINE 168 OF ..\..\library\src\stm32f10x_gpio.c: 'GPIO_InitStruct': undefined identifier
 169   4              {
 170   5                GPIOx->BRR = (((u32)0x01) << pinpos);
*** ERROR C202 IN LINE 170 OF ..\..\library\src\stm32f10x_gpio.c: 'GPIOx': undefined identifier
*** ERROR C141 IN LINE 170 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near '0x01'
*** ERROR C141 IN LINE 170 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near ')'
 171   5              }
 172   4              else
 173   4              {
 174   5                /* Set the corresponding ODR bit */
 175   5                if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 176   5                {
 177   6                  GPIOx->BSRR = (((u32)0x01) << pinpos);
*** ERROR C202 IN LINE 177 OF ..\..\library\src\stm32f10x_gpio.c: 'GPIOx': undefined identifier
*** ERROR C141 IN LINE 177 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near '0x01'
*** ERROR C141 IN LINE 177 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near ')'
 178   6                }
 179   5              }
 180   4            }
 181   3          }
 182   2          GPIOx->CRL = tmpreg;
 183   2        }
 184   1      
 185   1      /*---------------------------- GPIO CRH Configuration ------------------------*/
 186   1        /* Configure the eight high port pins */
 187   1        if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
*** ERROR C202 IN LINE 187 OF ..\..\library\src\stm32f10x_gpio.c: 'GPIO_InitStruct': undefined identifier
 188   1        {
 189   2          tmpreg = GPIOx->CRH;
*** ERROR C202 IN LINE 189 OF ..\..\library\src\stm32f10x_gpio.c: 'tmpreg': undefined identifier
 190   2          for (pinpos = 0x00; pinpos < 0x08; pinpos++)
*** ERROR C202 IN LINE 190 OF ..\..\library\src\stm32f10x_gpio.c: 'pinpos': undefined identifier
 191   2          {
 192   3            pos = (((u32)0x01) << (pinpos + 0x08));
*** ERROR C202 IN LINE 192 OF ..\..\library\src\stm32f10x_gpio.c: 'pos': undefined identifier
*** ERROR C141 IN LINE 192 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near '0x01'
*** ERROR C141 IN LINE 192 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near ')'
*** ERROR C141 IN LINE 192 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near ')'
 193   3            /* Get the port pins position */
 194   3            currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 195   3            if (currentpin == pos)
*** ERROR C202 IN LINE 195 OF ..\..\library\src\stm32f10x_gpio.c: 'currentpin': undefined identifier
 196   3            {
 197   4              pos = pinpos << 2;
*** ERROR C202 IN LINE 197 OF ..\..\library\src\stm32f10x_gpio.c: 'pos': undefined identifier
 198   4              /* Clear the corresponding high control register bits */
 199   4              pinmask = ((u32)0x0F) << pos;
*** ERROR C202 IN LINE 199 OF ..\..\library\src\stm32f10x_gpio.c: 'pinmask': undefined identifier
*** ERROR C141 IN LINE 199 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near '0x0F'
*** ERROR C141 IN LINE 199 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near ')'
 200   4              tmpreg &= ~pinmask;
*** ERROR C202 IN LINE 200 OF ..\..\library\src\stm32f10x_gpio.c: 'tmpreg': undefined identifier
 201   4      
 202   4              /* Write the mode configuration in the corresponding bits */
 203   4              tmpreg |= (currentmode << pos);
*** ERROR C202 IN LINE 203 OF ..\..\library\src\stm32f10x_gpio.c: 'tmpreg': undefined identifier
 204   4      
 205   4              /* Reset the corresponding ODR bit */
 206   4              if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
C51 COMPILER V9.05   STM32F10X_GPIO                                                        06/03/2012 17:04:54 PAGE 6   

*** ERROR C202 IN LINE 206 OF ..\..\library\src\stm32f10x_gpio.c: 'GPIO_InitStruct': undefined identifier
 207   4              {
 208   5                GPIOx->BRR = (((u32)0x01) << (pinpos + 0x08));
*** ERROR C202 IN LINE 208 OF ..\..\library\src\stm32f10x_gpio.c: 'GPIOx': undefined identifier
*** ERROR C141 IN LINE 208 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near '0x01'
*** ERROR C141 IN LINE 208 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near ')'
*** ERROR C141 IN LINE 208 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near ')'
 209   5              }
 210   4              /* Set the corresponding ODR bit */
 211   4              if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 212   4              {
 213   5                GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
*** ERROR C202 IN LINE 213 OF ..\..\library\src\stm32f10x_gpio.c: 'GPIOx': undefined identifier
*** ERROR C141 IN LINE 213 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near '0x01'
*** ERROR C141 IN LINE 213 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near ')'
*** ERROR C141 IN LINE 213 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near ')'
 214   5              }
 215   4            }
 216   3          }
 217   2          GPIOx->CRH = tmpreg;
 218   2        }
 219   1      }
 220          
 221          /*******************************************************************************
 222          * Function Name  : GPIO_StructInit
 223          * Description    : Fills each GPIO_InitStruct member with its default value.
 224          * Input          : - GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure
 225          *                    which will be initialized.
 226          * Output         : None
 227          * Return         : None
 228          *******************************************************************************/
 229          void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
*** ERROR C141 IN LINE 229 OF ..\..\library\src\stm32f10x_gpio.c: syntax error near '*', expected ')'
 230          {
 231   1        /* Reset GPIO init structure parameters values */
 232   1        GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
*** ERROR C202 IN LINE 232 OF ..\..\library\src\stm32f10x_gpio.c: 'GPIO_InitStruct': undefined identifier
 233   1        GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
*** ERROR C202 IN LINE 233 OF ..\..\library\src\stm32f10x_gpio.c: 'GPIO_InitStruct': undefined identifier
 234   1        GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
*** ERROR C202 IN LINE 234 OF ..\..\library\src\stm32f10x_gpio.c: 'GPIO_InitStruct': undefined identifier
 235   1      }
 236          
 237          /*******************************************************************************
 238          * Function Name  : GPIO_ReadInputDataBit
 239          * Description    : Reads the specified input port pin.
 240          * Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
 241          *                : - GPIO_Pin:  specifies the port bit to read.
 242          *                    This parameter can be GPIO_Pin_x where x can be (0..15).
 243          * Output         : None
 244          * Return         : The input port pin value.
 245          *******************************************************************************/
 246          u8 GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
*** ERROR C129 IN LINE 246 OF ..\..\library\src\stm32f10x_gpio.c: missing ';' before 'GPIO_ReadInputDataBit'
 247          {
 248            u8 bitstatus = 0x00;
 249            
 250            /* Check the parameters */
 251            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 252            assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
 253            
 254            if ((GPIOx->IDR & GPIO_Pin) != (u32)Bit_RESET)
C51 COMPILER V9.05   STM32F10X_GPIO                                                        06/03/2012 17:04:54 PAGE 7   

 255            {
 256              bitstatus = (u8)Bit_SET;
 257            }
 258            else
 259            {
 260              bitstatus = (u8)Bit_RESET;
 261            }
 262            return bitstatus;
 263          }
 264          
 265          /*******************************************************************************
 266          * Function Name  : GPIO_ReadInputData
 267          * Description    : Reads the specified GPIO input data port.
 268          * Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
 269          * Output         : None
 270          * Return         : GPIO input data port value.
 271          *******************************************************************************/
 272          u16 GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
 273          {
 274            /* Check the parameters */
 275            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 276            
 277            return ((u16)GPIOx->IDR);
 278          }
 279          
 280          /*******************************************************************************
 281          * Function Name  : GPIO_ReadOutputDataBit
 282          * Description    : Reads the specified output data port bit.
 283          * Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
 284          *                : - GPIO_Pin:  specifies the port bit to read.
 285          *                    This parameter can be GPIO_Pin_x where x can be (0..15).
 286          * Output         : None
 287          * Return         : The output port pin value.
 288          *******************************************************************************/
 289          u8 GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
 290          {
 291            u8 bitstatus = 0x00;
 292          
 293            /* Check the parameters */
 294            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 295            assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
 296            
 297            if ((GPIOx->ODR & GPIO_Pin) != (u32)Bit_RESET)
 298            {
 299              bitstatus = (u8)Bit_SET;
 300            }
 301            else
 302            {
 303              bitstatus = (u8)Bit_RESET;
 304            }
 305            return bitstatus;
 306          }
 307          
 308          /*******************************************************************************
 309          * Function Name  : GPIO_ReadOutputData
 310          * Description    : Reads the specified GPIO output data port.
 311          * Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
 312          * Output         : None
 313          * Return         : GPIO output data port value.
 314          *******************************************************************************/
 315          u16 GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
 316          {
C51 COMPILER V9.05   STM32F10X_GPIO                                                        06/03/2012 17:04:54 PAGE 8   

 317            /* Check the parameters */
 318            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 319              
 320            return ((u16)GPIOx->ODR);
 321          }
 322          
 323          /*******************************************************************************
 324          * Function Name  : GPIO_SetBits
 325          * Description    : Sets the selected data port bits.
 326          * Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
 327          *                  - GPIO_Pin: specifies the port bits to be written.
 328          *                    This parameter can be any combination of GPIO_Pin_x where 
 329          *                    x can be (0..15).
 330          * Output         : None
 331          * Return         : None
 332          *******************************************************************************/
 333          void GPIO_SetBits(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
 334          {
 335            /* Check the parameters */
 336            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 337            assert_param(IS_GPIO_PIN(GPIO_Pin));
 338            
 339            GPIOx->BSRR = GPIO_Pin;
 340          }
 341          
 342          /*******************************************************************************
 343          * Function Name  : GPIO_ResetBits
 344          * Description    : Clears the selected data port bits.
 345          * Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
 346          *                  - GPIO_Pin: specifies the port bits to be written.
 347          *                    This parameter can be any combination of GPIO_Pin_x where 
 348          *                    x can be (0..15).
 349          * Output         : None
 350          * Return         : None
 351          *******************************************************************************/
 352          void GPIO_ResetBits(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
 353          {
 354            /* Check the parameters */
 355            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 356            assert_param(IS_GPIO_PIN(GPIO_Pin));
 357            
 358            GPIOx->BRR = GPIO_Pin;
 359          }
 360          
 361          /*******************************************************************************
 362          * Function Name  : GPIO_WriteBit
 363          * Description    : Sets or clears the selected data port bit.
 364          * Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
 365          *                  - GPIO_Pin: specifies the port bit to be written.
 366          *                    This parameter can be one of GPIO_Pin_x where x can be (0..15).
 367          *                  - BitVal: specifies the value to be written to the selected bit.
 368          *                    This parameter can be one of the BitAction enum values:
 369          *                       - Bit_RESET: to clear the port pin
 370          *                       - Bit_SET: to set the port pin
 371          * Output         : None
 372          * Return         : None
 373          *******************************************************************************/
 374          void GPIO_WriteBit(GPIO_TypeDef* GPIOx, u16 GPIO_Pin, BitAction BitVal)
 375          {
 376            /* Check the parameters */
 377            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 378            assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
C51 COMPILER V9.05   STM32F10X_GPIO                                                        06/03/2012 17:04:54 PAGE 9   

 379            assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
 380            
 381            if (BitVal != Bit_RESET)
 382            {
 383              GPIOx->BSRR = GPIO_Pin;
 384            }
 385            else
 386            {
 387              GPIOx->BRR = GPIO_Pin;
 388            }
 389          }
 390          
 391          /*******************************************************************************
 392          * Function Name  : GPIO_Write
 393          * Description    : Writes data to the specified GPIO data port.
 394          * Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
 395          *                  - PortVal: specifies the value to be written to the port output
 396          *                    data register.
 397          * Output         : None
 398          * Return         : None
 399          *******************************************************************************/
 400          void GPIO_Write(GPIO_TypeDef* GPIOx, u16 PortVal)
 401          {
 402            /* Check the parameters */
 403            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 404            
 405            GPIOx->ODR = PortVal;
 406          }
 407          
 408          /*******************************************************************************
 409          * Function Name  : GPIO_PinLockConfig
 410          * Description    : Locks GPIO Pins configuration registers.
 411          * Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
 412          *                  - GPIO_Pin: specifies the port bit to be written.
 413          *                    This parameter can be any combination of GPIO_Pin_x where 
 414          *                    x can be (0..15).
 415          * Output         : None
 416          * Return         : None
 417          *******************************************************************************/
 418          void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
 419          {
 420            u32 tmp = 0x00010000;
 421            
 422            /* Check the parameters */
 423            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 424            assert_param(IS_GPIO_PIN(GPIO_Pin));
 425            
 426            tmp |= GPIO_Pin;
 427            /* Set LCKK bit */
 428            GPIOx->LCKR = tmp;
 429            /* Reset LCKK bit */
 430            GPIOx->LCKR =  GPIO_Pin;
 431            /* Set LCKK bit */
 432            GPIOx->LCKR = tmp;
 433            /* Read LCKK bit*/
 434            tmp = GPIOx->LCKR;
 435            /* Read LCKK bit*/
 436            tmp = GPIOx->LCKR;
 437          }
 438          
 439          /*******************************************************************************
 440          * Function Name  : GPIO_EventOutputConfig
C51 COMPILER V9.05   STM32F10X_GPIO                                                        06/03/2012 17:04:54 PAGE 10  

 441          * Description    : Selects the GPIO pin used as Event output.
 442          * Input          : - GPIO_PortSource: selects the GPIO port to be used as source
 443          *                    for Event output.
 444          *                    This parameter can be GPIO_PortSourceGPIOx where x can be
 445          *                    (A..E).
 446          *                  - GPIO_PinSource: specifies the pin for the Event output.
 447          *                    This parameter can be GPIO_PinSourcex where x can be (0..15).
 448          * Output         : None
 449          * Return         : None
 450          *******************************************************************************/
 451          void GPIO_EventOutputConfig(u8 GPIO_PortSource, u8 GPIO_PinSource)
 452          {
 453            u32 tmpreg = 0x00;
 454          
 455            /* Check the parameters */
 456            assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
 457            assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
 458              
 459            tmpreg = AFIO->EVCR;
 460            /* Clear the PORT[6:4] and PIN[3:0] bits */
 461            tmpreg &= EVCR_PORTPINCONFIG_MASK;
 462            tmpreg |= (u32)GPIO_PortSource << 0x04;
 463            tmpreg |= GPIO_PinSource;
 464          
 465            AFIO->EVCR = tmpreg;
 466          }
 467          
 468          /*******************************************************************************
 469          * Function Name  : GPIO_EventOutputCmd
 470          * Description    : Enables or disables the Event Output.
 471          * Input          : - NewState: new state of the Event output.
 472          *                    This parameter can be: ENABLE or DISABLE.
 473          * Output         : None
 474          * Return         : None
 475          *******************************************************************************/
 476          void GPIO_EventOutputCmd(FunctionalState NewState)
 477          {
 478            /* Check the parameters */
 479            assert_param(IS_FUNCTIONAL_STATE(NewState));
 480            
 481            *(vu32 *) EVCR_EVOE_BB = (u32)NewState;
 482          }
 483          
 484          /*******************************************************************************
 485          * Function Name  : GPIO_PinRemapConfig
 486          * Description    : Changes the mapping of the specified pin.
 487          * Input          : - GPIO_Remap: selects the pin to remap.
 488          *                    This parameter can be one of the following values:
 489          *                       - GPIO_Remap_SPI1
 490          *                       - GPIO_Remap_I2C1
 491          *                       - GPIO_Remap_USART1
 492          *                       - GPIO_Remap_USART2
 493          *                       - GPIO_PartialRemap_USART3
 494          *                       - GPIO_FullRemap_USART3
 495          *                       - GPIO_PartialRemap_TIM1
 496          *                       - GPIO_FullRemap_TIM1
 497          *                       - GPIO_PartialRemap1_TIM2
 498          *                       - GPIO_PartialRemap2_TIM2
 499          *                       - GPIO_FullRemap_TIM2
 500          *                       - GPIO_PartialRemap_TIM3
 501          *                       - GPIO_FullRemap_TIM3
 502          *                       - GPIO_Remap_TIM4
C51 COMPILER V9.05   STM32F10X_GPIO                                                        06/03/2012 17:04:54 PAGE 11  

 503          *                       - GPIO_Remap1_CAN
 504          *                       - GPIO_Remap2_CAN
 505          *                       - GPIO_Remap_PD01
 506          *                       - GPIO_Remap_TIM5CH4_LSI
 507          *                       - GPIO_Remap_ADC1_ETRGINJ
 508          *                       - GPIO_Remap_ADC1_ETRGREG
 509          *                       - GPIO_Remap_ADC2_ETRGINJ
 510          *                       - GPIO_Remap_ADC2_ETRGREG
 511          *                       - GPIO_Remap_SWJ_NoJTRST
 512          *                       - GPIO_Remap_SWJ_JTAGDisable
 513          *                       - GPIO_Remap_SWJ_Disable
 514          *                  - NewState: new state of the port pin remapping.
 515          *                    This parameter can be: ENABLE or DISABLE.
 516          * Output         : None
 517          * Return         : None
 518          *******************************************************************************/
 519          void GPIO_PinRemapConfig(u32 GPIO_Remap, FunctionalState NewState)
 520          {
 521            u32 tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 522          
 523            /* Check the parameters */
 524            assert_param(IS_GPIO_REMAP(GPIO_Remap));
 525            assert_param(IS_FUNCTIONAL_STATE(NewState));  
 526            
 527            tmpreg = AFIO->MAPR;
 528          
 529            tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 530            tmp = GPIO_Remap & LSB_MASK;
 531          
 532            if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBIT
             -S_MASK))
 533            {
 534              tmpreg &= DBGAFR_SWJCFG_MASK;
 535              AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 536            }
 537            else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 538            {
 539              tmp1 = ((u32)0x03) << tmpmask;
 540              tmpreg &= ~tmp1;
 541              tmpreg |= ~DBGAFR_SWJCFG_MASK;
 542            }
 543            else
 544            {
 545              tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 546              tmpreg |= ~DBGAFR_SWJCFG_MASK;
 547            }
 548          
 549            if (NewState != DISABLE)
 550            {
 551              tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 552            }
 553          
 554            AFIO->MAPR = tmpreg;
 555          }
 556          
 557          /*******************************************************************************
 558          * Function Name  : GPIO_EXTILineConfig
 559          * Description    : Selects the GPIO pin used as EXTI Line.
 560          * Input          : - GPIO_PortSource: selects the GPIO port to be used as
 561          *                    source for EXTI lines.
 562          *                    This parameter can be GPIO_PortSourceGPIOx where x can be
 563          *                    (A..G).
C51 COMPILER V9.05   STM32F10X_GPIO                                                        06/03/2012 17:04:54 PAGE 12  

 564          *                  - GPIO_PinSource: specifies the EXTI line to be configured.
 565          *                   This parameter can be GPIO_PinSourcex where x can be (0..15).
 566          * Output         : None
 567          * Return         : None
 568          *******************************************************************************/
 569          void GPIO_EXTILineConfig(u8 GPIO_PortSource, u8 GPIO_PinSource)
 570          {
 571            u32 tmp = 0x00;
 572          
 573            /* Check the parameters */
 574            assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
 575            assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
 576            
 577            tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));
 578          
 579            AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 580            AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((u32)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (u8)0x03)))
             -;
 581          }
 582          
 583          /******************* (C) COPYRIGHT 2008 STMicroelectronics *****END OF FILE****/

C51 COMPILATION COMPLETE.  2 WARNING(S),  108 ERROR(S)
